import React, { useContext, useEffect, useState } from 'react';
import S from './style';
import { HeaderContext } from '../../../../context/HeaderContext';
import ConfirmModal from '../../../layout/modal/ConfirmModal';
import { useDispatch, useSelector } from 'react-redux';
import { setUser, setUserStatus } from '../../../../modules/member';

const CartViewModal = ({handleConfrmModal, onCancel, setConfirmModal}) => {
    const columnTitles = ["", "ÏïÑÏù¥ÌÖú Ïù¥Î¶Ñ", "ÏïÑÏù¥ÌÖú Ïù¥ÎØ∏ÏßÄ", "Í∞úÏàò", "Í∞úÎãπ ÏïÑÏù¥ÌÖú Í∞ÄÍ≤©", "ÏïÑÏù¥ÌÖú Ï¥ù Í∞ÄÍ≤©"]; // ÎßàÏßÄÎßâÏùÄ Ïä§ÌÅ¨Î°§ Í≥µÍ∞ÑÏö©
    const [itemList, setItemList] = useState([]);
    const { lockScroll, unlockScroll } = useContext(HeaderContext);
    const [checkedItemList, setCheckedItemList] = useState([]);
    const [buyingPrice, setBuyingPrice] = useState(0);
    const [showCartConfirmModal, setShowCartConfirmModal] = useState(false);
    const [showCartConfirmOkModal, setShowCartConfirmOkModal] = useState(false);
    
    const dispatch = useDispatch();
    const member = useSelector(state => state.member.currentUser); // üî• ÏµúÏã†Í∞í ÏÇ¨Ïö©

    const isAllChecked = itemList.length > 0 && checkedItemList.length === itemList.length;
    const isItemChecked = (itemId) => {
        return checkedItemList.some(item => item.itemId === itemId);
    };
    const handleToggleAll = () => {
        if (checkedItemList.length === itemList.length) {
            // Ï†ÑÏ≤¥ ÏÑ†ÌÉùÎêú ÏÉÅÌÉú ‚Üí Ï†ÑÏ≤¥ Ìï¥Ï†ú
            setCheckedItemList([]);
        } else {
            // ÌïòÎÇòÎèÑ ÏóÜÍ±∞ÎÇò ÏùºÎ∂ÄÎßå ÏÑ†ÌÉù ‚Üí Ï†ÑÏ≤¥ ÏÑ†ÌÉù
            setCheckedItemList(itemList);
        }
    };
    const handleCheckItem = (checkedItem) => {
        setCheckedItemList((prev) => {
            const exists = prev.some(item => item.itemId === checkedItem.itemId);

            if (exists) {
                // Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ Ï†úÍ±∞
                return prev.filter(item => item.itemId !== checkedItem.itemId);
            } else {
                // ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
                return [...prev, checkedItem];
            }
        });
    }

    
    useEffect(() => {
        if (handleConfrmModal) lockScroll();

        setBuyingPrice(checkedItemList.reduce((sum, item) => sum + item.totalPrice, 0));
        getCartItems();
        return () => unlockScroll();
    }, [member, handleConfrmModal, checkedItemList, buyingPrice, isAllChecked]);
    
    if (!handleConfrmModal) return (
        <>
        </>
    );

    const deleteItems = async () => {
        checkedItemList.map(async (checkedItem) => {
            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/point-shop/api/cart/item/delete`, {
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(checkedItem)
            });
        })

        // Î™®Îì† ÏÇ≠Ï†ú ÏöîÏ≤≠Ïù¥ ÏôÑÎ£åÎêú Ïù¥ÌõÑÏóê ÏàòÌñâ
        await getCartItems(); // cart Í∞±Ïã†
        setCheckedItemList([]); // Ï≤¥ÌÅ¨ Ï¥àÍ∏∞Ìôî

        setConfirmModal((modal) => ({
            ...modal,
            showModal: false, 
        }))
    }

    const handleDeleteItem = () => {
        setConfirmModal((modal) => ({
            showModal: true, 
            modalTitleMsg: "Ïû•Î∞îÍµ¨Îãà ÏÇ≠Ï†ú",
            modalDescriptionMsg: "ÏÑ†ÌÉùÌïú ÏïÑÏù¥ÌÖúÏùÑ Ïû•Î∞îÍµ¨ÎãàÏóê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
            onConfirm: () => deleteItems(),
            modalOkBtnMsg: "ÏÇ≠Ï†ú",
            modalCancelBtnMsg: "Ï∑®ÏÜå",
        }))
    };

    const getCartItems = async () => {
        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/point-shop/api/cart/item-list/${member.id}`)
        const data = await response.json();
        setItemList(data);
    }

    const buyItems = async () => {
        const totalPrice = checkedItemList.reduce((acc, item) => acc + (item.totalPrice || 0), 0);

        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/point-shop/api/item/buy`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                totalPrice: totalPrice,
                buyingItems: checkedItemList,
                deleteCart: true
            })
        })
        
        // Î™®Îì† Íµ¨Îß§ ÏöîÏ≤≠Ïù¥ ÏôÑÎ£åÎêú Ïù¥ÌõÑÏóê ÏàòÌñâ
        await getCartItems(); // cart Í∞±Ïã†
        setCheckedItemList([]); // Ï≤¥ÌÅ¨ Ï¥àÍ∏∞Ìôî
        const updatedMember = {
            ...member,
            memberPoint: member.memberPoint - totalPrice
        };
        // Redux ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        dispatch(setUser(updatedMember));

        setConfirmModal((modal) => ({
            ...modal,
            showModal: false, 
        }))
    }

    
    const handleBuyItem = () => {
        setConfirmModal((modal) => ({
            showModal: true, 
            modalTitleMsg: "Ïû•Î∞îÍµ¨Îãà Íµ¨Îß§",
            modalDescriptionMsg: "ÏÑ†ÌÉùÌïú ÏïÑÏù¥ÌÖúÏùÑ Íµ¨Îß§ÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
            onConfirm: () => buyItems(),
            modalOkBtnMsg: "Íµ¨Îß§",
            modalCancelBtnMsg: "Ï∑®ÏÜå",
        }))
    };

    
    return (
        <S.ModalOverlay>
            <S.ModalContainer>
                <S.TitleContainer>
                    <S.Title>Ïû•Î∞îÍµ¨Îãà</S.Title>
                    <S.CloseButton 
                        src='/assets/images/modal/close-button.png' 
                        alt='xÎ≤ÑÌäº' 
                        onClick={onCancel} />
                </S.TitleContainer>
                <S.GridContainer>
                    <S.GridHeader>
                    {columnTitles.map((title, index) => {
                        if(title === ""){
                            return (
                                <S.GridCell 
                                    key={index} 
                                    widthIndex={index} 
                                    isHeader
                                >
                                    <S.CheckBox
                                        checked={isAllChecked}
                                        onChange={handleToggleAll}
                                    />
                                </S.GridCell>
                            )
                        }else {
                            return (
                                <S.GridCell 
                                    key={index} 
                                    widthIndex={index} 
                                    isHeader
                                >
                                {title}
                                </S.GridCell>
                            )
                        }
                    })}
                    </S.GridHeader>

                    <S.GridBody>
                    { itemList && itemList.map((item, i) => (
                        <S.GridRow key={i}>
                        {columnTitles.map((column, col) => {
                            switch(column){
                                case "":
                                    return (
                                        <S.GridCell widthIndex={col}>
                                            <S.CheckBox 
                                                checked={isItemChecked(item.itemId)}
                                                onChange={() => handleCheckItem(item)}
                                            />
                                        </S.GridCell>
                                    )
                                case "ÏïÑÏù¥ÌÖú Ïù¥Î¶Ñ":
                                    return (
                                        <S.GridCell widthIndex={col}>
                                            {item.itemName}
                                        </S.GridCell>
                                    )
                                case "ÏïÑÏù¥ÌÖú Ïù¥ÎØ∏ÏßÄ":
                                    return (
                                        <S.GridCell widthIndex={col}>
                                            <img 
                                                width={'80px'}
                                                height={'80px'}
                                                src={`${process.env.REACT_APP_BACKEND_URL}/files/api/display?filePath=${item.itemImgPath}&fileName=${item.itemImgName}`}
                                            />
                                        </S.GridCell>
                                    )
                                case "Í∞úÏàò":
                                    return (
                                        <S.GridCell widthIndex={col}>
                                            {item.buyItemCount}
                                        </S.GridCell>
                                    )
                                case "Í∞úÎãπ ÏïÑÏù¥ÌÖú Í∞ÄÍ≤©":
                                    return (
                                        <S.GridCell widthIndex={col}>
                                            {item.itemPrice}
                                        </S.GridCell>
                                    )
                                case "ÏïÑÏù¥ÌÖú Ï¥ù Í∞ÄÍ≤©":
                                    return (
                                        <S.GridCell widthIndex={col}>
                                            {item.totalPrice}
                                        </S.GridCell>
                                    )
                            }
                        })}
                        </S.GridRow>
                    ))}
                    </S.GridBody>
                </S.GridContainer>
                <S.CartInfoContainer>
                    <S.CartButton
                        background={'#FF3F3F'} 
                        onClick={handleDeleteItem}
                        hoverBackground={'#FF4E00'}>
                        ÏÑ†ÌÉù ÏïÑÏù¥ÌÖú ÏÇ≠Ï†ú
                    </S.CartButton>
                    <S.InfoTitleText>Ï¥ù   <S.DescriptionPoint>{itemList.length}</S.DescriptionPoint> Í±¥</S.InfoTitleText>
                    <S.PointInfoWrapper>
                        <S.InfoDescText>Î≥¥Ïú† Ìè¨Ïù∏Ìä∏ : <S.DescriptionPoint>{member.memberPoint}</S.DescriptionPoint> ü™ô</S.InfoDescText>
                        <S.InfoDescText>- Ï¥ù Í∏àÏï° : <S.DescriptionPoint>{buyingPrice}</S.DescriptionPoint> ü™ô</S.InfoDescText>
                        <S.InfoDescText style={{borderTop:'1px solid #000'}}>ÎÇ®Îäî Ìè¨Ïù∏Ìä∏ : <S.DescriptionPoint>{member.memberPoint - buyingPrice}</S.DescriptionPoint> ü™ô</S.InfoDescText>
                    </S.PointInfoWrapper>
                    <S.CartButton 
                        background={'#009DCC'} 
                        onClick={handleBuyItem}
                        hoverBackground={'#009DFF'}>
                        Íµ¨Îß§
                    </S.CartButton>
                </S.CartInfoContainer>
            </S.ModalContainer>
        </S.ModalOverlay>
    );
};

export default CartViewModal;